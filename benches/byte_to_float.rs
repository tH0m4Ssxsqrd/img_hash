//! Evaluating converting from u8 [0, 255] to f32 [0, 1] using either naive conversion or a lookup
//! table.
//!
//! I found that the naive version actually optimizes better because it can be vectorized while
//! the lookup apparently can't. The difference is even more striking with AVX2 which provides even
//! wider SIMD lanes for the conversion.
//!
//! The difference is not explained by bounds checking because the lookup doesn't appear to
//! emit any: <https://godbolt.org/z/sutBRr>
//! In fact, `.get_unchecked()` seems to make it perform *worse*. Try it.

#[macro_use]
extern crate criterion;

use criterion::{BenchmarkId, Criterion, Throughput};

static LOOKUP: [f32; 256] = [
    0.0,
    0.003_921_569,
    0.007_843_138,
    0.011_764_706,
    0.015_686_275,
    0.019_607_844,
    0.023_529_412,
    0.027_450_98,
    0.031_372_55,
    0.035_294_12,
    0.039_215_688,
    0.043_137_256,
    0.047_058_824,
    0.050_980_393,
    0.054_901_96,
    0.058_823_53,
    0.062_745_1,
    0.066_666_67,
    0.070_588_24,
    0.074_509_81,
    0.078_431_375,
    0.082_352_94,
    0.086_274_51,
    0.090_196_08,
    0.094_117_65,
    0.098_039_22,
    0.101_960_786,
    0.105_882_354,
    0.109_803_92,
    0.113_725_49,
    0.117_647_06,
    0.121_568_63,
    0.125_490_2,
    0.129_411_77,
    0.133_333_34,
    0.137_254_91,
    0.141_176_48,
    0.145_098_05,
    0.149_019_61,
    0.152_941_18,
    0.156_862_75,
    0.160_784_32,
    0.164_705_89,
    0.168_627_46,
    0.172_549_02,
    0.176_470_6,
    0.180_392_16,
    0.184_313_73,
    0.188_235_3,
    0.192_156_87,
    0.196_078_43,
    0.2,
    0.203_921_57,
    0.207_843_14,
    0.211_764_71,
    0.215_686_28,
    0.219_607_84,
    0.223_529_41,
    0.227_450_98,
    0.231_372_55,
    0.235_294_12,
    0.239_215_69,
    0.243_137_26,
    0.247_058_82,
    0.250_980_4,
    0.254_901_98,
    0.258_823_54,
    0.262_745_1,
    0.266_666_68,
    0.270_588_25,
    0.274_509_82,
    0.278_431_4,
    0.282_352_95,
    0.286_274_52,
    0.290_196_1,
    0.294_117_66,
    0.298_039_23,
    0.301_960_8,
    0.305_882_36,
    0.309_803_93,
    0.313_725_5,
    0.317_647_07,
    0.321_568_64,
    0.325_490_2,
    0.329_411_77,
    0.333_333_34,
    0.337_254_9,
    0.341_176_48,
    0.345_098_05,
    0.349_019_62,
    0.352_941_2,
    0.356_862_75,
    0.360_784_32,
    0.364_705_9,
    0.368_627_46,
    0.372_549_03,
    0.376_470_6,
    0.380_392_16,
    0.384_313_73,
    0.388_235_3,
    0.392_156_87,
    0.396_078_44,
    0.4,
    0.403_921_57,
    0.407_843_14,
    0.411_764_7,
    0.415_686_28,
    0.419_607_85,
    0.423_529_42,
    0.427_450_98,
    0.431_372_55,
    0.435_294_12,
    0.439_215_7,
    0.443_137_26,
    0.447_058_83,
    0.450_980_4,
    0.454_901_96,
    0.458_823_53,
    0.462_745_1,
    0.466_666_67,
    0.470_588_24,
    0.474_509_8,
    0.478_431_37,
    0.482_352_94,
    0.486_274_5,
    0.490_196_08,
    0.494_117_65,
    0.498_039_22,
    0.501_960_8,
    0.505_882_4,
    0.509_803_95,
    0.513_725_5,
    0.517_647_1,
    0.521_568_66,
    0.525_490_2,
    0.529_411_8,
    0.533_333_36,
    0.537_254_9,
    0.541_176_5,
    0.545_098_07,
    0.549_019_63,
    0.552_941_2,
    0.556_862_8,
    0.560_784_34,
    0.564_705_9,
    0.568_627_5,
    0.572_549_05,
    0.576_470_6,
    0.580_392_2,
    0.584_313_75,
    0.588_235_3,
    0.592_156_9,
    0.596_078_46,
    0.6,
    0.603_921_6,
    0.607_843_16,
    0.611_764_7,
    0.615_686_3,
    0.619_607_87,
    0.623_529_43,
    0.627_451,
    0.631_372_6,
    0.635_294_14,
    0.639_215_7,
    0.643_137_3,
    0.647_058_84,
    0.650_980_4,
    0.654_902,
    0.658_823_55,
    0.662_745_1,
    0.666_666_7,
    0.670_588_25,
    0.674_509_8,
    0.678_431_4,
    0.682_352_96,
    0.686_274_5,
    0.690_196_1,
    0.694_117_67,
    0.698_039_23,
    0.701_960_8,
    0.705_882_4,
    0.709_803_94,
    0.713_725_5,
    0.717_647_1,
    0.721_568_64,
    0.725_490_2,
    0.729_411_8,
    0.733_333_35,
    0.737_254_9,
    0.741_176_5,
    0.745_098_05,
    0.749_019_6,
    0.752_941_2,
    0.756_862_76,
    0.760_784_3,
    0.764_705_9,
    0.768_627_46,
    0.772_549_03,
    0.776_470_6,
    0.780_392_17,
    0.784_313_74,
    0.788_235_3,
    0.792_156_9,
    0.796_078_44,
    0.8,
    0.803_921_6,
    0.807_843_15,
    0.811_764_7,
    0.815_686_3,
    0.819_607_85,
    0.823_529_4,
    0.827_451,
    0.831_372_56,
    0.835_294_1,
    0.839_215_7,
    0.843_137_26,
    0.847_058_83,
    0.850_980_4,
    0.854_901_97,
    0.858_823_54,
    0.862_745_1,
    0.866_666_7,
    0.870_588_24,
    0.874_509_8,
    0.878_431_4,
    0.882_352_95,
    0.886_274_5,
    0.890_196_1,
    0.894_117_65,
    0.898_039_2,
    0.901_960_8,
    0.905_882_36,
    0.909_803_9,
    0.913_725_5,
    0.917_647_06,
    0.921_568_63,
    0.925_490_2,
    0.929_411_77,
    0.933_333_34,
    0.937_254_9,
    0.941_176_5,
    0.945_098_04,
    0.949_019_6,
    0.952_941_2,
    0.956_862_75,
    0.960_784_3,
    0.964_705_9,
    0.968_627_45,
    0.972_549,
    0.976_470_6,
    0.980_392_16,
    0.984_313_7,
    0.988_235_3,
    0.992_156_86,
    0.996_078_43,
    1.0,
];

fn bench_functions(c: &mut Criterion) {
    let sizes = [64usize, 128, 256, 384, 512, 768, 1024];

    let mut group = c.benchmark_group("byte to float conversion");

    for size in sizes {
        group.throughput(Throughput::Bytes(size as _));

        group.bench_function(BenchmarkId::new("lookup", size), |b| {
            let vals: Vec<u8> = (0..=255).cycle().take(size).collect();

            b.iter_with_setup(
                || Vec::with_capacity(size),
                move |mut out: Vec<f32>| out.extend(vals.iter().map(|&x| LOOKUP[x as usize])),
            );
        });

        group.bench_function(BenchmarkId::new("naive", size), |b| {
            let vals: Vec<u8> = (0..=255).cycle().take(size).collect();

            b.iter_with_setup(
                || Vec::with_capacity(size),
                |mut out| out.extend(vals.iter().map(|&x| f32::from(x) / 255.)),
            );
        });
    }
    group.finish();
}

criterion_group!(benches, bench_functions);
criterion_main!(benches);
